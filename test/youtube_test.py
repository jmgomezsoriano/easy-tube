import unittest

from easytube import YouTube
from easytube.utils import get_authenticated_service, get_playlist_videos


class MyTestCase(unittest.TestCase):
    def test_video(self) -> None:
        youtube = YouTube('youtube-oath2-credentials.json', 'my-oauth2.json')
        self.assertIsNone(youtube.video_from_id('yqv2iXcojz6Zy9IPAuy0D-ZbLPg'))
        video = youtube.video_from_id('1vdw1Y6bGuA')
        self.assertEqual(str(video), "('1vdw1Y6bGuA', 'Operadores de cadena de caracteres', '0:26:12')")
        self.assertEqual(video.title, 'Operadores de cadena de caracteres')
        self.assertFalse(video.caption)
        self.assertEqual(video.category_id, 28)
        self.assertEqual(video.channel_id, 'UCo_fg5ZyCCHt75ryUUa6ebw')
        self.assertEqual(video.channel_title, 'A Smart Code')
        self.assertEqual(video.channel.id, video.channel_id)
        self.assertEqual(video.channel.title, video.channel_title)
        self.assertEqual(video.channel.description, 'Canal sobre programación.')
        self.assertEqual(video.channel.kind, 'youtube#channel')
        self.assertIsNone(video.channel.custom_url)
        self.assertEqual(video.channel.likes, '')
        self.assertGreaterEqual(len(video.channel.playlists), 4)
        self.assertEqual(video.channel.published_at, '2018-12-13T14:52:41Z')
        self.assertFalse(video.channel.statistics.hidden_subscriber_count)
        self.assertGreaterEqual(video.channel.statistics.subscriber_count, 600)
        self.assertGreaterEqual(video.channel.statistics.video_count, 43)
        self.assertGreaterEqual(video.channel.statistics.view_count, 24000)
        self.assertEqual(len(video.channel.thumbnails), 3)
        self.assertEqual(video.channel.thumbnails[0].kind, 'youtube#thumbnail')
        self.assertEqual(video.channel.thumbnails[0].id, 'default')
        self.assertEqual(video.channel.thumbnails[0].width, 88)
        self.assertEqual(video.channel.thumbnails[0].height, 88)
        self.assertEqual(video.channel.thumbnails[0].url[-72:],
                         'AKedOLRxt1FDzjCSY6HgFwPMJDPUtsV9hK5KojJ2IYHKPA=s88-c-k-c0x00ffffff-no-rj')
        self.assertSetEqual(set(video.channel.topics['topicIds']), {'/m/07c1v', '/m/01k8wb', '/m/019_rr'})
        self.assertIn('https://en.wikipedia.org/wiki/Technology', video.channel.topics['topicCategories'])
        self.assertEqual(video.channel.uploads.id, 'UUo_fg5ZyCCHt75ryUUa6ebw')
        self.assertEqual(video.channel.url, 'https://www.youtube.com/channel/UCo_fg5ZyCCHt75ryUUa6ebw')
        self.assertEqual(video.default_audio_language, 'es-ES')
        self.assertEqual(video.definition, 'hd')
        self.assertEqual(video.description[:28], 'Los operadores sobre cadenas')
        self.assertEqual(video.dimension, '2d')
        self.assertEqual(str(video.duration), '0:26:12')
        self.assertTrue(video.embeddable)
        self.assertEqual(video.license, 'creativeCommon')
        self.assertFalse(video.licensed_content)
        self.assertEqual(video.live_broadcast_content, 'none')
        self.assertFalse(video.made_for_kids)
        self.assertEqual(video.player[:32], '<iframe width="480" height="270"')
        self.assertEqual(video.privacy_status, 'public')
        self.assertEqual(video.projection, 'rectangular')
        self.assertTrue(video.public_stats_viewable)
        self.assertEqual(video.published_at, '2019-10-11T10:00:13Z')
        self.assertGreaterEqual(video.statistics.comment_count, 2)
        self.assertGreaterEqual(video.statistics.dislike_count, 0)
        self.assertGreaterEqual(video.statistics.favorite_count, 0)
        self.assertGreaterEqual(video.statistics.like_count, 12)
        self.assertGreaterEqual(video.statistics.view_count, 109)
        self.assertSetEqual(set(video.tags), {'programación', 'python', 'cadenas de caracteres',
                                              'operadores', 'codificación de caracteres'})
        self.assertEqual(video.thumbnails[1].kind, 'youtube#thumbnail')
        self.assertEqual(video.thumbnails[1].id, 'medium')
        self.assertEqual(video.thumbnails[1].url, 'https://i.ytimg.com/vi/1vdw1Y6bGuA/mqdefault.jpg')
        self.assertEqual(video.thumbnails[1].width, 320)
        self.assertEqual(video.thumbnails[1].height, 180)
        self.assertListEqual(video.topic_categories, ['https://en.wikipedia.org/wiki/Knowledge'])
        self.assertEqual(video.upload_status, 'processed')
        self.assertEqual(video.url, 'https://www.youtube.com/watch?v=1vdw1Y6bGuA')
        print(video)

    def test_get_channel(self) -> None:
        youtube = YouTube('youtube-oath2-credentials.json', 'my-oauth2.json')
        self.assertIsNone(youtube.channel('UCo_fg5ZyCCHt75ryUUa6ebwa'))
        channel = youtube.channel('UCo_fg5ZyCCHt75ryUUa6ebw')
        self.assertEqual(channel.title, 'A Smart Code')
        self.assertEqual(channel.url, 'https://www.youtube.com/channel/UCo_fg5ZyCCHt75ryUUa6ebw')
        channel = youtube.channel_from_url('https://www.youtube.com/channel/UCo_fg5ZyCCHt75ryUUa6ebw/about')
        self.assertEqual(channel.title, 'A Smart Code')

    def test_get_playlists(self) -> None:
        youtube = YouTube('youtube-oath2-credentials.json', 'my-oauth2.json')
        channel = youtube.channel('UCo_fg5ZyCCHt75ryUUa6ebw')
        self.assertGreaterEqual(len(channel.playlists), 4)
        self.assertEqual(youtube.playlist('PLmf8nIhY4ISvHi1tUiZqEYjEiI185nzJH').title, 'Programación')

    def test_get_videos(self) -> None:
        service = get_authenticated_service('youtube-oath2-credentials.json', 'my-oauth2.json')
        youtube = YouTube('youtube-oath2-credentials.json', 'my-oauth2.json')
        playlist = youtube.playlist('PLmf8nIhY4ISvHi1tUiZqEYjEiI185nzJH')
        self.assertEqual(playlist.title, 'Programación')
        # print(get_playlist_videos(service, 'PLmf8nIhY4ISvHi1tUiZqEYjEiI185nzJH'))
        # youtube = YouTube('youtube-oath2-credentials.json', 'my-oauth2.json')
        # playlist = youtube.playlist('PLmf8nIhY4ISvHi1tUiZqEYjEiI185nzJH')
        # self.assertGreaterEqual(playlist.num_videos, 26)
        # print(playlist.videos)


if __name__ == '__main__':
    unittest.main()
